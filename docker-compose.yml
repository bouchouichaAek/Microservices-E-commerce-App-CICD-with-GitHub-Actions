version: "3.9"

services:
  # ======================
  # Databases
  # ======================
  users_db:
    image: mysql:8
    container_name: users_db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 123456789
      MYSQL_DATABASE: users_db
      MYSQL_USER: authuser
      MYSQL_PASSWORD: authpassword
    ports:
      - "3306:3306"
    volumes:
      - users_db_data:/var/lib/mysql
    networks:
      - network-01

  order_db:
    image: mysql:8
    container_name: order_db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 123456789
      MYSQL_DATABASE: order_db
      MYSQL_USER: orderuser
      MYSQL_PASSWORD: orderpassword
    ports:
      - "3308:3306"
    volumes:
      - order_db_data:/var/lib/mysql
    networks:
      - network-01

  product_db:
    image: mysql:8
    container_name: product_db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 123456789
      MYSQL_DATABASE: product_db
      MYSQL_USER: productuser
      MYSQL_PASSWORD: productpassword
    ports:
      - "3307:3306"
    volumes:
      - product_db_data:/var/lib/mysql
    networks:
      - network-01

  kong-database:
    image: postgres:15
    container_name: kong-database
    environment:
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
      POSTGRES_DB: kong
    ports:
      - "5432:5432"
    networks:
      - network-01
    restart: always
    volumes:
      - kong-db-data:/var/lib/postgresql/data

  # ======================
  # Microservices
  # ======================
  auth-service:
    image: abdelkader97/auth-service:latest
    container_name: auth-service
    restart: always
    pull_policy: always
    ports:
      - "5000:5000"
    environment:
      DB_HOST: users_db
      DB_USER: authuser
      DB_PASSWORD: authpassword
      DB_NAME: users_db
      DB_DIALECT: mysql
      JWT_SECRET: SuperSecretAPI
      JWT_EXPIRY: 24h
      PORT: 5000
    depends_on:
      - users_db
    networks:
      - network-01

  order-service:
    image: abdelkader97/order-service:latest
    container_name: order-service
    restart: always
    pull_policy: always
    ports:
      - "5002:5002"
    environment:
      DB_HOST: order_db
      DB_USER: orderuser
      DB_PASSWORD: orderpassword
      DB_NAME: order_db
      DB_DIALECT: mysql
      JWT_SECRET: SuperSecretAPI
      JWT_EXPIRY: 24h
      CHARGILY_API_KEY: test_pk_OWKUvx53qLLApOSha4uZV7RBWPAsKCVVIvGnZ3B8
      CHARGILY_API_SECRET: test_sk_oEQkA56exTVv2Ht4hapzAIUD8m1YtosKHJjiz1I9
      CHARGILY_API_MODE: test
      AUTH_SERVICE: auth-service:5000
      PRODUCT_SERVICE: product-service:5001
      ORDER_SERVICE: order-service:5002
      PAYMENT_SERVICE: payment-service:5003
      PORT: 5002
    depends_on:
      - order_db
    networks:
      - network-01

  product-service:
    image: abdelkader97/product-service:latest
    container_name: product-service
    restart: always
    pull_policy: always
    ports:
      - "5001:5001"
    environment:
      DB_HOST: product_db
      DB_USER: productuser
      DB_PASSWORD: productpassword
      DB_NAME: product_db
      DB_DIALECT: mysql
      JWT_SECRET: SuperSecretAPI
      JWT_EXPIRY: 24h
      AUTH_SERVICE: auth-service:5000
      PRODUCT_SERVICE: product-service:5001
      PORT: 5001
    depends_on:
      - product_db
    networks:
      - network-01

  payment-service:
    image: abdelkader97/payment-service:latest
    container_name: payment-service
    restart: always
    pull_policy: always
    ports:
      - "5003:5003"
    environment:
      CHARGILY_API_KEY: test_pk_OWKUvx53qLLApOSha4uZV7RBWPAsKCVVIvGnZ3B8
      CHARGILY_API_SECRET: test_sk_oEQkA56exTVv2Ht4hapzAIUD8m1YtosKHJjiz1I9
      CHARGILY_API_MODE: test
      CHECKOUT_URL: https://pay.chargily.net/test/api/v2/checkouts
      RABBITMQ_PROTOCOL: amqp
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: admin
      RABBITMQ_PASSWORD: admin
      AUTH_SERVICE: auth-service:5000
      PRODUCT_SERVICE: product-service:5001
      ORDER_SERVICE: order-service:5002
      PAYMENT_SERVICE: payment-service:5003
      PORT: 5003
    networks:
      - network-01

  notification-service:
    image: abdelkader97/notification-service:latest
    container_name: notification-service
    restart: always
    pull_policy: always
    ports:
      - "5004:5004"
    environment:
      CHARGILY_API_KEY: test_pk_OWKUvx53qLLApOSha4uZV7RBWPAsKCVVIvGnZ3B8
      CHARGILY_API_SECRET: test_sk_oEQkA56exTVv2Ht4hapzAIUD8m1YtosKHJjiz1I9
      CHARGILY_API_MODE: test
      TWILIO_ACCOUNT_SID:
      TWILIO_AUTH_TOKEN:
      EMAIL_USER: bouchouichaaek97@gmail.com
      EMAIL_PASS: "nqvz shyq dxjs vmaf"
      RABBITMQ_PROTOCOL: amqp
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_PORT: 5672
      RABBITMQ_USER: admin
      RABBITMQ_PASSWORD: admin
      CHECKOUT_URL: https://pay.chargily.net/test/api/v2/checkouts
      AUTH_SERVICE: auth-service:5000
      PRODUCT_SERVICE: product-service:5001
      ORDER_SERVICE: order-service:5002
      PAYMENT_SERVICE: payment-service:5003
      PORT: 5004
    networks:
      - network-01

  # ======================
  # Message Broker
  # ======================
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - network-01

  # ======================
  # Kong Gateway + Konga
  # ======================
  kong-migrations:
    image: kong:3.7
    container_name: kong-migrations
    depends_on:
      - kong-database
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
    command: kong migrations bootstrap
    networks:
      - network-01
    restart: on-failure

  kong:
    image: kong:3.7
    container_name: kong-gateway
    depends_on:
      - kong-database
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    ports:
      - "8000:8000"
      - "8443:8443"
      - "8001:8001"
      - "8444:8444"
    networks:
      - network-01
    restart: always

  konga:
    image: pantsel/konga:latest
    container_name: konga-ui
    ports:
      - "1337:1337"
    networks:
      - network-01
    restart: always
    environment:
      NODE_ENV: development

# ======================
# Volumes & Networks
# ======================
volumes:
  users_db_data:
  order_db_data:
  product_db_data:
  kong-db-data:
  rabbitmq_data:

networks:
  network-01:
    external: true
